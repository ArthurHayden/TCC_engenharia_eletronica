# -*- coding: utf-8 -*-
"""avaliacao_desempenho.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-QJ0AmCbK11Y6k_2-t6uEiTERHld1CZh
"""

from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from tensorflow.keras import layers
from keras.preprocessing import image
import os
import matplotlib.pyplot as plt
import pickle
import tensorflow as tf
import pandas as pd
from PIL import Image
from keras.callbacks import CSVLogger
from tensorflow.keras import models
from google.colab import drive
try:
    drive.mount('/content/gdrive')
except:
    pass
os.chdir('/content/gdrive/MyDrive/teste_acesso_colab_drive/IA_MRI_4_classes/historicos/rede_3')
#AUTOR: ARTHUR CAMPELO (ArthurHayden )
filename = 'historicos/rede_3'
def plot_training_history(history):
    # Training history visualization
    fig = plt.figure(figsize=(4, 3))
    plt.plot(history['accuracy'], label = 'Training', linewidth = 1.2)
    plt.plot(history['val_accuracy'], label = 'Validation', linewidth = 1.2)
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend(loc="upper left")
    plt.show()
    fig = plt.figure(figsize=(4, 3))
    plt.plot(history['loss'], label = 'Training', linewidth = 1.2)
    plt.plot(history['val_loss'], label = 'Validation', linewidth = 1.2)
    plt.xlabel('Epoch')
    plt.ylabel('Loss function')
    plt.legend(loc="upper left")
    plt.show()

def graficos(pastas_selecionadas , name):
    for pasta in pastas_selecionadas:
        try:
            df = pd.read_csv(os.path.join(pasta, name))
            history_dict= df.to_dict('list')
            print()
            print(f"Histórico de treinamento da pasta {pasta} carregado com sucesso.")
            plot_training_history(history_dict)

            # Calcular e exibir métricas
            accuracy = history_dict['accuracy']
            val_accuracy = history_dict['val_accuracy']
            loss = history_dict['loss']
            val_loss = history_dict['val_loss']


            print(f"Desvio padrão da acurácia treinamento: {np.std(accuracy):.4f}")
            print(f"Desvio padrão da função de perda treinamento: {np.std(loss):.4f}")
            print(f"Média da acurácia treinamento: {np.mean(accuracy):.4f}")
            print(f"Média da função de perda treinamento: {np.mean(loss):.4f}")
            print()

        except FileNotFoundError:
            print(f"Arquivo de histórico não encontrado na pasta: {pasta}")

# Obtendo pastas de teste antes de alterar o diretório
print("deseja ver a qual rede: rede rasa (1) rede vgg16(2) mobile net (3)")
rede = input()
if rede == '1':
    os.chdir('/content/gdrive/MyDrive/teste_acesso_colab_drive/IA_MRI_4_classes/historicos/rede_3')
    name = '_rede_3_my_log.csv'
    print("pastas da rede rasa:")
    pastas = [f for f in os.listdir() if f.startswith("teste_")]
    #print("Pastas disponíveis:", pastas)
    for pasta in os.listdir():
        if pasta.startswith("teste_") and os.path.isdir(pasta):
            print(pasta)

    if not pastas:  # Verifica se a lista de pastas está vazia
        print("Nenhuma pasta de teste encontrada. Verifique o diretório.")
    else:
        # Perguntando ao usuário quais pastas deseja visualizar (apenas uma vez)
        while True:
            pastas_str = input("Digite os números das pastas separados por espaço (ex: 1 3 5): ")
            try:
                pastas_selecionadas = [pastas[int(x)-1] for x in pastas_str.split()]
                if not all(pasta in pastas for pasta in pastas_selecionadas):
                    raise ValueError("Números de pasta inválidos. Tente novamente.")
                break  # Sai do loop se a entrada for válida
            except (ValueError, IndexError):
                print("Entrada inválida. Digite números de pasta válidos e separados por espaço.")
        graficos(pastas_selecionadas, name)
elif rede == '2':
    os.chdir('/content/gdrive/MyDrive/teste_acesso_colab_drive/VGG16/historico')
    name = 'vgg16_my_log.csv'
    print("pastas da rede vgg16:")
    pastas = [f for f in os.listdir() if f.startswith("teste_")]
    #print("Pastas disponíveis:", pastas)
    for pasta in os.listdir():
        if pasta.startswith("teste_") and os.path.isdir(pasta):
            print(pasta)

    if not pastas:  # Verifica se a lista de pastas está vazia
        print("Nenhuma pasta de teste encontrada. Verifique o diretório.")
    else:
        # Perguntando ao usuário quais pastas deseja visualizar (apenas uma vez)
        while True:
            pastas_str = input("Digite os números das pastas separados por espaço (ex: 1 3 5): ")
            try:
                pastas_selecionadas = [pastas[int(x)-1] for x in pastas_str.split()]
                if not all(pasta in pastas for pasta in pastas_selecionadas):
                    raise ValueError("Números de pasta inválidos. Tente novamente.")
                break  # Sai do loop se a entrada for válida
            except (ValueError, IndexError):
                print("Entrada inválida. Digite números de pasta válidos e separados por espaço.")
        graficos(pastas_selecionadas, name)
elif rede == '3':
    os.chdir('/content/gdrive/MyDrive/teste_acesso_colab_drive/Mobile_net/historicos_mobile')
    name = 'mobile_net_my_log.csv'
    print("pastas da mobile:")
    pastas = [f for f in os.listdir() if f.startswith("teste_")]
    #print("Pastas disponíveis:", pastas)
    for pasta in os.listdir():
        if pasta.startswith("teste_") and os.path.isdir(pasta):
            print(pasta)

    if not pastas:  # Verifica se a lista de pastas está vazia
        print("Nenhuma pasta de teste encontrada. Verifique o diretório.")
    else:
        # Perguntando ao usuário quais pastas deseja visualizar (apenas uma vez)
        while True:
            pastas_str = input("Digite os números das pastas separados por espaço (ex: 1 3 5): ")
            try:
                pastas_selecionadas = [pastas[int(x)-1] for x in pastas_str.split()]
                if not all(pasta in pastas for pasta in pastas_selecionadas):
                    raise ValueError("Números de pasta inválidos. Tente novamente.")
                break  # Sai do loop se a entrada for válida
            except (ValueError, IndexError):
                print("Entrada inválida. Digite números de pasta válidos e separados por espaço.")
        graficos(pastas_selecionadas, name)
else:
    print("opção invalida")